{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMdonrIfAXqpdU6Y5Oiqjvo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ameliacaroline/-ameliacaroline-python-data-science-regression/blob/main/Regress%C3%A3o_Linear_Base_de_dados_aleat%C3%B3rios_para_regress%C3%A3o_linear_simples_.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#TESTE-TEMA: Regressão Linear\n",
        "##DF: Base de dados aleatorios para regressão linear simples.\n",
        "## Disponível em: [https://www.kaggle.com/datasets/andonians/random-linear-regression?resource=download&select=train.csv](https://)"
      ],
      "metadata": {
        "id": "46L3aDghqNaI"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8cLwf-LJqGq8"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "df_train = pd.read_csv ('/content/train.csv')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#verificando as informações de linha e coluna da base\n",
        "print(f\"linhas:{df_train.shape[0]}\")\n",
        "print(f\"colunas:{df_train.shape[1]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yfnTl_bNvWQs",
        "outputId": "032a810f-79c7-42ec-f260-7cc038803446"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "linhas:700\n",
            "colunas:2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Exercicio 4.1: \n",
        "Definindo y como a variável preditora"
      ],
      "metadata": {
        "id": "IWlMm5Z2wpLD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#definindo as variáveis dependentes (y) e independentes (X)\n",
        "df_train.dropna(inplace=True) #removendo as linhas com valores nulos\n",
        "y = df_train ['y'].values\n",
        "X = df_train.drop ('y', axis= 1).values "
      ],
      "metadata": {
        "id": "4mhJT4VrzzOe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exercicio 4.2\n",
        "• Variável preditora: y\n",
        "(Crie a matriz–coluna e redimensione y)\n",
        "• Faça a EDA dos dados com um scatter plot"
      ],
      "metadata": {
        "id": "Nc4mu1h7_ltP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "# Definindo X_alvo como a matriz-coluna\n",
        "X_alvo = X[:,0]  #Reformulando X_alvo para ter apenas uma coluna\n",
        "X_alvo = X_alvo.reshape(-1,1) #buscar exatamente o mesmo valor das linhas com -1, coluna 1. (mater o numero de linhas)\n",
        "\n",
        "y = y.reshape(-1,1)  #Reformulando y para ter apenas uma coluna\n",
        "# scatter plot \n",
        "# Criando um gráfico de dispersão com df_train\n",
        "plt.scatter(df_train['x'], df_train['y'])\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "T9e3J-TGwNwj",
        "outputId": "9f7526fd-ec45-498f-f384-be6a8f25dd15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ajuste do modelo de regressão linear\n",
        "Exercicio 4.3:\n",
        "\n",
        "Fazer o ajuste da reta para os dados\n",
        "\n",
        "Fazer o gráficod a reta"
      ],
      "metadata": {
        "id": "oJKomBmg2WeZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn import linear_model\n",
        "\n",
        "reg = linear_model.LinearRegression()\n",
        "reg.fit(X_alvo, y) #Parametro de treinamento: Na frente a variável preditora e depois o alvo.\n",
        "plt.scatter(X_alvo, y, color='blue')\n",
        "prediction_space = np.linspace(min(X_alvo),max(X_alvo)).reshape(-1,1)\n",
        "plt.plot(prediction_space, reg.predict(prediction_space),color='black',linewidth=2)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "UYlKqNtd3a0-",
        "outputId": "4047ea2a-48eb-4bc4-dc35-52fbc9f65051"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Predições a partir da variável y (preditora)\n",
        "## Exercicio 4.4:\n",
        "Fazer a regressão da variável-alvo Y com todas as variáveis preditoras"
      ],
      "metadata": {
        "id": "_GXU0CArMJNP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Dividindo os dados em conjuntos de treinamento e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_alvo, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Treinando o modelo com os dados de treinamento\n",
        "reg = linear_model.LinearRegression()\n",
        "reg.fit(X_train, y_train)\n",
        "\n",
        "# Realizando as previsões com os dados de teste\n",
        "y_pred = reg.predict(X_test)\n",
        "\n",
        "# tentando plotar os pontos de dados de teste e a nova linha de regressão\n",
        "# Para casa.\n",
        "plt.scatter(X_test.reshape(-1, 1), y_test.reshape(-1, 1), color='blue')\n",
        "plt.plot(X_test, y_pred, color='red', linewidth=2)\n",
        "plt.title('Gráfico de Regressão Linear Simples')\n",
        "plt.xlabel('Variável preditora X')\n",
        "plt.ylabel('Alvo: Y')\n",
        "plt.show()\n",
        "\n",
        "# avaliando o desempenho do modelo com o coeficiente de determinação\n",
        "#print('Regressão Linear Simples (OLS)')\n",
        "#r2_ols = reg.score(X_test, y_test)\n",
        "#print('R²:', r2_ols)\n",
        "\n",
        "print(reg.score(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "uoryNEj4Mkom",
        "outputId": "1d952497-22a2-4b51-c981-08e7d03a0996"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9910007028176463\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Exercicio 4.5\n",
        "• Fazer a regressão com a CV dos dados do exercício anterior com cv=5"
      ],
      "metadata": {
        "id": "_RufHE7WOvag"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "#refazendo a regressão linear simples\n",
        "reg = linear_model.LinearRegression() #instanciando o modelo\n",
        "cv_results = cross_val_score(reg,X,y,cv=5) # realizando o cv utilizando a função cross_val_score(), onde são passados como parâmetros o modelo de regressão linear, as variáveis preditoras X, a variável dependente y e o número de folds (cv=5) p/ a divisão dos dados.\n",
        "print('Lista de resultados do CV:',cv_results)\n",
        "print('Média dos resulados:',np.mean(cv_results)) \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qPl8AJraO5K1",
        "outputId": "b4786099-c926-40de-e5d9-8fa9c8dc71f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lista de resultados do CV: [0.9887418  0.98975303 0.9922575  0.99023067 0.99089936]\n",
            "Média dos resulados: 0.9903764720252457\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Exercicio 4.6\n",
        "Ridge Regression (regressão regularizada)\n",
        "\n",
        "> ESTUDO:  \n",
        "*Ajustando um modelo de regressão linear Ridge aos dados divididos em subconjuntos de treinamento e teste.* \n",
        "\n",
        "> A primeira linha importa a classe Ridge do pacote scikit-learn. Em seguida, o conjunto de dados é dividido em subconjuntos de **treinamento** e** teste** usando a função train_test_split. O parâmetro test_size é definido como 0,3, o que significa que 30% dos dados são usados como conjunto de teste.\n",
        "\n",
        "> Na terceira linha, a classe Ridge é instanciada com um parâmetro de regularização alpha de 0,1. Nesta linha não consegui utilizar o argumento(normalize=True)\n",
        "\n",
        "> A quarta linha ajusta o modelo aos dados de treinamento usando o método fit.\n",
        "\n",
        "> Na quinta linha, o modelo é usado para fazer previsões no conjunto de teste usando o método predict. As previsões são armazenadas em ridge_pred.\n",
        "\n",
        "> A última linha calcula e imprime o coeficiente de determinação R² do modelo em relação aos dados de teste, que é uma medida da qualidade de ajuste do modelo. \n",
        "\n",
        "> O valor impresso é o R² do modelo em relação aos dados de teste."
      ],
      "metadata": {
        "id": "rYZqhgQGVN5R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Ridge\n",
        "\n",
        "#conjunto de dados em dois subconjuntos, um p/ treinamento do modelo e outro p/ teste do modelo.\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42) #O valor 42 é um número escolhido arbitrariamente para o parâmetro random_state na função train_test_split\n",
        "\n",
        "# Instanciando o modelo\n",
        "ridge_reg = Ridge(alpha=0.1)\n",
        "\n",
        "# Fitting do Modelo\n",
        "ridge_reg.fit(X_train,y_train)\n",
        "\n",
        "# Predição\n",
        "ridge_pred = ridge_reg.predict(X_test)\n",
        "print('R²:',ridge_reg.score(X_test,y_test)) #imprimindo o valor do coeficiente de determinação (R-quadrado) da regressão ridge para as amostras de teste."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h03eMWmwVX42",
        "outputId": "41c2a073-c7ad-4908-e552-c42714ae6c99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R²: 0.9910007008673734\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exercicio 4.8\n",
        "## Comparação entre OLS e Ridge Regression (usando 10-fold cross validation)\n",
        "Verifique se há diferença estatisticamente significativa entre os coeficientes de determinação (R2) dos métodos: \n",
        "– Regressão OLS \n",
        "– Regressão Ridge com alfa = 0,1 \n",
        "– Regressão Ridge com alfa = 0,5     \n",
        "\n",
        "Para tal, utilize o teste de Kruskal-Wallis e o teste\n",
        "a posteriori de Dunn, com 10 execuções para cada método."
      ],
      "metadata": {
        "id": "pBWgQnCvdFOQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import kruskal\n"
      ],
      "metadata": {
        "id": "BZ5PQIS-jb5Q"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
